// Generated by CoffeeScript 1.9.3
(function() {
  (function($) {
    var addItemToProject, generateUUID, getParams, setParams, settings, syncHandler, syncURL;
    if (!settings in window) {
      window.alert("ERROR! Must set settings.js -- see README");
      throw "ERROR! Must set settings.js -- see README";
    }
    settings = window.settings;
    syncURL = settings.apiBase + "sync";
    getParams = {
      token: settings.apiKey,
      seq_no: 0,
      seq_no_global: 0,
      resource_types: JSON.stringify(["projects"])
    };
    setParams = {
      token: settings.apiKey
    };
    if (!chrome.runtime.onMessage.hasListeners()) {
      chrome.runtime.onMessage.addListener(function(message, sender) {
        return syncHandler(message.input);
      });
    }
    $(window).bind("keydown", settings.saveToProjectBind, function(e) {
      var activeURL;
      activeURL = window.location.href;
      syncHandler(activeURL);
      return false;
    });
    syncHandler = function(item, projectName, date) {
      if (item == null) {
        item = null;
      }
      if (projectName == null) {
        projectName = "Inbox";
      }
      if (date == null) {
        date = "today";
      }
      if (!item || item === "") {
        return;
      }
      if (projectName === "Inbox") {
        return chrome.storage.local.get({
          inboxId: ""
        }, function(object) {
          if (chrome.runtime.lastError) {
            return window.alert("getStorage ERROR! => " + chrome.runtime.lastError);
          } else if (object.inboxId !== "") {
            return addItemToProject(item, object.inboxId, projectName, date);
          } else {
            return $.getJSON(syncURL, getParams, function(response) {
              var i, len, p, project, ref, results;
              project = null;
              ref = response.Projects;
              results = [];
              for (i = 0, len = ref.length; i < len; i++) {
                p = ref[i];
                if (p.name === projectName) {
                  chrome.storage.local.set({
                    inboxId: project.id
                  });
                  addItemToProject(item, project.id, projectName, date);
                  break;
                } else {
                  results.push(void 0);
                }
              }
              return results;
            });
          }
        });
      } else {
        return $.getJSON(syncURL, getParams, function(response) {
          var i, len, p, project, ref, results;
          project = null;
          ref = response.Projects;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            p = ref[i];
            if (p.name === projectName) {
              addItemToProject(item, project.id, projectName, date);
              break;
            } else {
              results.push(void 0);
            }
          }
          return results;
        });
      }
    };
    addItemToProject = function(item, projectId, projectName, date) {
      var uuid;
      uuid = generateUUID();
      setParams.commands = JSON.stringify([
        {
          type: "item_add",
          uuid: uuid,
          temp_id: uuid,
          args: {
            project_id: projectId,
            content: item,
            date_string: date
          }
        }
      ]);
      return $.getJSON(syncURL, setParams, function(response) {
        var k, ref, v;
        ref = response.SyncStatus;
        for (k in ref) {
          v = ref[k];
          if (v !== "ok") {
            window.alert("Sync error!");
            return;
          }
        }
        return window.alert("Added task to \"" + projectName + "\"");
      });
    };
    return generateUUID = function() {
      return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        var r, v;
        r = Math.random() * 16 | 0;
        v = c === "x" ? r : r & 0x3 | 0x8;
        return v.toString(16);
      });
    };
  })(jQuery);

}).call(this);
